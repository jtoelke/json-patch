/*
 * Copyright (c) 2014, Francis Galiegue (fgaliegue@gmail.com)
 *
 * This software is dual-licensed under:
 *
 * - the Lesser General Public License (LGPL) version 3.0 or, at your option, any
 *   later version;
 * - the Apache Software License (ASL) version 2.0.
 *
 * The text of this file and of both licenses is available at the root of this
 * project or, if you have the jar distribution, in directory META-INF/, under
 * the names LGPL-3.0.txt and ASL-2.0.txt respectively.
 *
 * Direct link to the sources:
 *
 * - LGPL 3.0: https://www.gnu.org/licenses/lgpl-3.0.txt
 * - ASL 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt
 */

apply(plugin: "java");
apply(plugin: "maven");
apply(plugin: "signing");
apply(plugin: "osgi");
apply(plugin: "idea");
apply(plugin: "eclipse");

group = "com.box";
version = "1.16-SNAPSHOT";
sourceCompatibility = "1.6";
targetCompatibility = "1.6"; // defaults to sourceCompatibility

/*
 * List of dependencies
 */
dependencies {
    compile(group: "com.google.code.findbugs", name: "jsr305", version: "2.0.1");
    compile(group: "com.github.fge", name: "jackson-coreutils", version: "1.6");
    testCompile(group: "org.testng", name: "testng", version: "6.8.7") {
        exclude(group: "junit", module: "junit");
        exclude(group: "org.beanshell", module: "bsh");
        exclude(group: "org.yaml", module: "snakeyaml");
    };
    testCompile(group: "org.mockito", name: "mockito-core", version: "1.9.5");
    testCompile(group: "org.assertj", name: "assertj-core", version: "1.7.0");
}

javadoc.options.links("http://docs.oracle.com/javase/6/docs/api/");
javadoc.options.links("http://jsr-305.googlecode.com/svn/trunk/javadoc/");
javadoc.options.links("http://fasterxml.github.com/jackson-databind/javadoc/2.2.0/");
javadoc.options.links("http://fasterxml.github.com/jackson-core/javadoc/2.2.0/");
javadoc.options.links("http://fasterxml.github.com/jackson-annotations/javadoc/2.2.0/");
javadoc.options.links("http://docs.guava-libraries.googlecode.com/git-history/v16.0.1/javadoc/");
javadoc.options.links("http://fge.github.io/msg-simple/");
javadoc.options.links("http://fge.github.io/jackson-coreutils/");

/*
 * Repositories to use
 */
repositories {
    mavenCentral();
}

/*
 * Necessary! Otherwise TestNG will not be used...
 *
 */
test {
    useTestNG() {
        useDefaultListeners = true;
    };
}

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources";
    from sourceSets.main.allSource;
}

/*
 * Javadoc: we need to tell where the overview.html is, it will not pick it up
 * automatically...
 */

//javadoc {
//    options.overview = "src/main/java/overview.html";
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc";
    from javadoc.destinationDir;
}

artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.5";
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
}

task pom << {
    pom {}.writeTo("${projectDir}/pom.xml");
}

/*
 * SIGNING
 */

project.ext {
    description = "JSON Patch (RFC 6902) and JSON Merge Patch (RFC 7386) implementation in Java";
    scmURL = sprintf("git@github.com:box-metadata/%s.git", name);
    projectURL = sprintf("https://github.com/box-metadata/%s", name);
    sonatypeStaging = "https://oss.sonatype.org/service/local/staging/deploy/maven2/";
    sonatypeSnapshots = "https://oss.sonatype.org/content/repositories/snapshots/";
};

task checkSigningRequirements << {
    def requiredProperties = [ "sonatypeUsername", "sonatypePassword" ];
    def noDice = false;
    requiredProperties.each {
        if (project.properties[it] == null) {
            noDice = true;
            System.err.printf("property \"%s\" is not defined!")
        }
    }
    if (noDice)
        throw new IllegalStateException("missing required properties for " +
            "upload");
}

uploadArchives {
    dependsOn(checkSigningRequirements);
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment);
            }

            repository(url: "${sonatypeStaging}") {
                authentication(
                    userName: project.properties["sonatypeUsername"],
                    password: project.properties["sonatypePassword"]
                );
            }

            snapshotRepository(url: "${sonatypeSnapshots}") {
                authentication(
                    userName: project.properties["sonatypeUsername"],
                    password: project.properties["sonatypePassword"]
                );
            }
        }
    }
}

/*
 * Configure pom.xml on install, uploadArchives
 */
[
    install.repositories.mavenInstaller,
    uploadArchives.repositories.mavenDeployer
]*.pom*.whenConfigured { pom ->
    pom.project {
        name "${project.name}";
        packaging "jar";
        description "${project.ext.description}";
        url "${projectURL}";

        scm {
            url "${scmURL}";
            connection "scm:git:${scmURL}";
            developerConnection "scm:git${scmURL}";
        }

        licenses {
            license {
                name "Lesser General Public License, version 3 or greater";
                url "http://www.gnu.org/licenses/lgpl.html";
                distribution "repo";
            };
            license {
                name "Apache Software License, version 2.0";
                url "http://www.apache.org/licenses/LICENSE-2.0";
                distribution "repo";
            }
        }

        developers {
            developer {
                id "metadata-dev";
                name "Metadata Dev";
                email "metadata-dev@box.com";
            }
        }
    }
}

ext.forRelease = !version.endsWith("-SNAPSHOT");
signing {
    required { forRelease && gradle.taskGraph.hasTask("uploadArchives") };
    sign configurations.archives;
}


buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
  }
}
apply plugin: "com.jfrog.artifactory"

artifactory {
    contextUrl = 'https://box.jfrog.io/box'
    resolve {
        repository {
            repoKey = 'box-maven-snapshots'
            maven = true
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}
